https://docs.google.com/spreadsheets/d/1SbpY-04Cz8EWw3A_LBUmDEXKUMO31DBjfeMoA0dlfIA/edit#gid=1085385252
Catalan Number: 1/(n+1)C(n, 2n) = f(0)*f(n) + f(1)*f(n-1) + f(2)*f(n-2) + ... + f(n)*f(0)
2^n - 1 = C(1, n) + C(2, n) + ... + C(n, n)
polynomial, exponential, Nth power of 2 (2^n)
dfs and bfs should consider VISITED to avoid circle accessing.

Graph:
1. shortest path:
    BFS, Dijkstra(VlogV with PQ), Bellman-Ford(VE, can handle negative edge)
2. topological sort:
3. Eulerian path:
    Hierholzer

158 Read N Characters Given Read4 II - Call multiple times
    def __init__(self):
        self.left = []

    def read(self, buf, n):
        count, reads = 0, [''] * 4

        if self.left:
            while count < min(n, len(self.left)):
                buf[count] = self.left[count]
                count += 1

            self.left = self.left[count:]

        while count < n:
            size = read4(reads)
            if not size:
                break

            length = min(n - count, size)
            self.left = reads[length : size]

            for i in xrange(length):
                buf[count] = reads[i]
                count += 1

        return count

164. Maximum Gap (radix sort, bucket sort, time:n, space:n)
    def maximumGap(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums or len(nums) < 2:
            return 0
        minNum, maxNum = nums[0], nums[0]
        n = len(nums)
        for num in nums:
            minNum = min(minNum, num)
            maxNum = max(maxNum, num)
        
        bucketSize = max(1, (maxNum - minNum) / (n - 1))
        bucketNum = (maxNum - minNum) / bucketSize + 1
        buckets = [[False, sys.maxsize, -sys.maxsize] for _ in range(bucketNum)]
        for num in nums:
            i = (num - minNum) / bucketSize
            buckets[i][0] = True
            buckets[i][1] = min(buckets[i][1], num)
            buckets[i][2] = max(buckets[i][2], num)
        
        result = 0
        preMax = minNum
        for i in range(len(buckets)):
            if buckets[i][0]:
                result = max(result, buckets[i][1] - preMax)
                preMax = buckets[i][2]
        return result

220. Contains Duplicate III (sliding window, bucket sorting)
public class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if (k < 1 || t < 0) return false;
        Map<Long, Long> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            long remappedNum = (long) nums[i] - Integer.MIN_VALUE;
            long bucket = remappedNum / ((long) t + 1);
            if (map.containsKey(bucket)
                    || (map.containsKey(bucket - 1) && remappedNum - map.get(bucket - 1) <= t)
                        || (map.containsKey(bucket + 1) && map.get(bucket + 1) - remappedNum <= t))
                            return true;
            if (map.entrySet().size() >= k) {
                long lastBucket = ((long) nums[i - k] - Integer.MIN_VALUE) / ((long) t + 1);
                map.remove(lastBucket);
            }
            map.put(bucket, remappedNum);
        }
        return false;
    }
}

Union Find: (Path compression, union by rank)
Worst time complexity is n, union by rank make worse time Log(n), using both of them make amortized time complexity to be constant
def find(parents, i):   # path compression
    if parents[i] != i:
        parents[i] = find(parents, parents[i])
    return parents[i]
    
def find(parents, i):   # path halving
    while parents[i] != i:
        parents[i] = parents[parents[i]]
        i = parents[i]
    return i
    
def unionByRank(parents, ranks, x, y):
    xRoot = find(parents, x)
    yRoot = find(parents, y)
    if xRoot == yRoot:
        return
    if ranks[xRoot] > ranks[yRoot]:
        xRoot, yRoot = yRoot, xRoot
    parents[xRoot] = yRoot
    if ranks[xRoot] == ranks[yRoot]:
        ranks[yRoot] += 1
    
Segment Tree:
307. Range Sum Query - Mutable
    class SegmentTreeNode {
        int start, end;
        SegmentTreeNode left, right;
        int sum;

        public SegmentTreeNode(int start, int end) {
            this.start = start;
            this.end = end;
            this.left = null;
            this.right = null;
            this.sum = 0;
        }
    }
      
    SegmentTreeNode root = null;
   
    public NumArray(int[] nums) {
        root = buildTree(nums, 0, nums.length-1);
    }

    private SegmentTreeNode buildTree(int[] nums, int start, int end) {
        if (start > end) {
            return null;
        } else {
            SegmentTreeNode ret = new SegmentTreeNode(start, end);
            if (start == end) {
                ret.sum = nums[start];
            } else {
                int mid = start  + (end - start) / 2;             
                ret.left = buildTree(nums, start, mid);
                ret.right = buildTree(nums, mid + 1, end);
                ret.sum = ret.left.sum + ret.right.sum;
            }         
            return ret;
        }
    }
   
    void update(int i, int val) {
        update(root, i, val);
    }
   
    void update(SegmentTreeNode root, int pos, int val) {
        if (root.start == root.end) {
           root.sum = val;
        } else {
            int mid = root.start + (root.end - root.start) / 2;
            if (pos <= mid) {
                 update(root.left, pos, val);
            } else {
                 update(root.right, pos, val);
            }
            root.sum = root.left.sum + root.right.sum;
        }
    }

    public int sumRange(int i, int j) {
        return sumRange(root, i, j);
    }
    
    public int sumRange(SegmentTreeNode root, int start, int end) {
        if (root.end == end && root.start == start) {
            return root.sum;
        } else {
            int mid = root.start + (root.end - root.start) / 2;
            if (end <= mid) {
                return sumRange(root.left, start, end);
            } else if (start >= mid+1) {
                return sumRange(root.right, start, end);
            }  else {    
                return sumRange(root.right, mid+1, end) + sumRange(root.left, start, mid);
            }
        }
    }

Permutations : https://leetcode.com/problems/permutations/
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        result = []
        self.dfs(nums, 0, result)
        return result
        
    def dfs(self, nums, start, result):
        if start == len(nums):
            result.append(nums[:])
            return
        
        for i in range(start, len(nums)):
            nums[start], nums[i] = nums[i], nums[start]
            self.dfs(nums, start+1, result)
            nums[start], nums[i] = nums[i], nums[start]
            
    def permute(self, nums):
        result = []
        self._permute(nums, [], result)
        return result
        
    def _permute(self, nums, path, result):
        if len(path) == len(nums):
            result.append(list(path))
        for num in nums:
            if num not in path:
                path.append(num)
                self._permute(nums, path, result)
                path.pop()
                
Permutations II (contains duplicates) : https://leetcode.com/problems/permutations-ii/

public List<List<Integer>> permuteUnique(int[] nums) {
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(nums);
    backtrack(list, new ArrayList<>(), nums, new boolean[nums.length]);
    return list;
}

private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, boolean [] used){
    if(tempList.size() == nums.length){
        list.add(new ArrayList<>(tempList));
    } else{
        for(int i = 0; i < nums.length; i++){
            if(used[i] || i > 0 && nums[i] == nums[i-1] && !used[i - 1]) continue;
            used[i] = true; 
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, used);
            used[i] = false; 
            tempList.remove(tempList.size() - 1);
        }
    }
}

Subsets : https://leetcode.com/problems/subsets/

public List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(nums);
    backtrack(list, new ArrayList<>(), nums, 0);
    return list;
}

private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){
    list.add(new ArrayList<>(tempList));
    for(int i = start; i < nums.length; i++){
        tempList.add(nums[i]);
        backtrack(list, tempList, nums, i + 1);
        tempList.remove(tempList.size() - 1);
    }
}
Subsets II (contains duplicates) : https://leetcode.com/problems/subsets-ii/

public List<List<Integer>> subsetsWithDup(int[] nums) {
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(nums);
    backtrack(list, new ArrayList<>(), nums, 0);
    return list;
}

private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, int start){
    list.add(new ArrayList<>(tempList));
    for(int i = start; i < nums.length; i++){
        if(i > start && nums[i] == nums[i-1]) continue; // skip duplicates
        tempList.add(nums[i]);
        backtrack(list, tempList, nums, i + 1);
        tempList.remove(tempList.size() - 1);
    }
} 

Combination Sum : https://leetcode.com/problems/combination-sum/

public List<List<Integer>> combinationSum(int[] nums, int target) {
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(nums);
    backtrack(list, new ArrayList<>(), nums, target, 0);
    return list;
}

private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, int remain, int start){
    if(remain < 0) return;
    else if(remain == 0) list.add(new ArrayList<>(tempList));
    else{ 
        for(int i = start; i < nums.length; i++){
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, remain - nums[i], i); // not i + 1 because we can reuse same elements
            tempList.remove(tempList.size() - 1);
        }
    }
}
Combination Sum II (can't reuse same element) : https://leetcode.com/problems/combination-sum-ii/

public List<List<Integer>> combinationSum2(int[] nums, int target) {
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(nums);
    backtrack(list, new ArrayList<>(), nums, target, 0);
    return list;
    
}

private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, int remain, int start){
    if(remain < 0) return;
    else if(remain == 0) list.add(new ArrayList<>(tempList));
    else{
        for(int i = start; i < nums.length; i++){
            if(i > start && nums[i] == nums[i-1]) continue; // skip duplicates
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, remain - nums[i], i + 1);
            tempList.remove(tempList.size() - 1); 
        }
    }
} 

Palindrome Partitioning : https://leetcode.com/problems/palindrome-partitioning/

public List<List<String>> partition(String s) {
   List<List<String>> list = new ArrayList<>();
   backtrack(list, new ArrayList<>(), s, 0);
   return list;
}

public void backtrack(List<List<String>> list, List<String> tempList, String s, int start){
   if(start == s.length())
      list.add(new ArrayList<>(tempList));
   else{
      for(int i = start; i < s.length(); i++){
         if(isPalindrome(s, start, i)){
            tempList.add(s.substring(start, i + 1));
            backtrack(list, tempList, s, i + 1);
            tempList.remove(tempList.size() - 1);
         }
      }
   }
}

public boolean isPalindrome(String s, int low, int high){
   while(low < high)
      if(s.charAt(low++) != s.charAt(high--)) return false;
   return true;
} 

68. Text Justification
def fullJustify(self, words, maxWidth):
    res, cur, num_of_letters = [], [], 0
    for w in words:
        if num_of_letters + len(w) + len(cur) > maxWidth:
            if len(cur) == 1:
                res.append( cur[0] + ' '*(maxWidth - num_of_letters) )
            else:
                num_spaces = maxWidth - num_of_letters
                space_between_words, num_extra_spaces = divmod( num_spaces, len(cur)-1)
                for i in range(num_extra_spaces):
                    cur[i] += ' '
                res.append( (' '*space_between_words).join(cur) )
            cur, num_of_letters = [], 0
        cur += [w]
        num_of_letters += len(w)
    res.append( ' '.join(cur) + ' '*(maxWidth - num_of_letters - len(cur) + 1) )
    return res

102. Binary Tree Level Order Traversal
    def levelOrderBFS(self, root):
        if not root:
            return []
        
        result = []
        q = collections.deque()
        q.append(root)
        while q:
            size = len(q)
            line = []
            for i in range(size):
                top = q.popleft()
                line.append(top.val)
                if top.left:
                    q.append(top.left)
                if top.right:
                    q.append(top.right)
            result.append(line)
        return result
        
    def levelOrderDFS(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        result = []
        self.dfs(root, 0, result)
        return result
       
    def dfs(self, root, level, result):
        if not root:
            return
        if level == len(result):
            result.append([])
        result[level].append(root.val)
        self.dfs(root.left, level+1, result)
        self.dfs(root.right, level+1, result)
        
109. Convert Sorted List to Binary Search Tree
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
        n, cur = 0, head
        while cur:
            n += 1
            cur = cur.next
        cur = [head]
        root = self.inorder(n, cur)
        return root
        
    def inorder(self, n, cur):
        if n <= 0:
            return None
        
        left = self.inorder(n//2, cur)
        root = TreeNode(cur[0].val)
        cur[0] = cur[0].next
        right = self.inorder(n - n//2 - 1, cur)
        root.left = left
        root.right = right
        return root

Convert Binary Search Tree (BST) to Sorted Doubly-Linked List
// This is a modified in-order traversal adapted to this problem.
// prev (init to NULL) is used to keep track of previously traversed node.
// head pointer is updated with the list's head as recursion ends.
void treeToDoublyList(Node *p, Node *& prev, Node *& head) {
  if (!p) return;
  treeToDoublyList(p->left, prev, head);
  // current node's left points to previous node
  p->left = prev;
  if (prev)
    prev->right = p;  // previous node's right points to current node
  else
    head = p; // current node (smallest element) is head of
              // the list if previous node is not available
  // as soon as the recursion ends, the head's left pointer 
  // points to the last node, and the last node's right pointer
  // points to the head pointer.
  Node *right = p->right;
  head->left = p;
  p->right = head;
  // updates previous node
  prev = p;
  treeToDoublyList(right, prev, head);
}
 
// Given an ordered binary tree, returns a sorted circular
// doubly-linked list. The conversion is done in-place.
Node* treeToDoublyList(Node *root) {
  Node *prev = NULL;
  Node *head = NULL;
  treeToDoublyList(root, prev, head);
  return head;
}

75. Sort Colors
    def sortColors(self, nums: List[int]) -> None:
        """
        Dutch National Flag problem solution.
        """
        # for all idx < p0 : nums[idx < p0] = 0
        # curr is an index of element under consideration
        p0 = curr = 0
        # for all idx > p2 : nums[idx > p2] = 2
        p2 = len(nums) - 1

        while curr <= p2:
            if nums[curr] == 0:
                nums[p0], nums[curr] = nums[curr], nums[p0]
                p0 += 1
                curr += 1
            elif nums[curr] == 2:
                nums[curr], nums[p2] = nums[p2], nums[curr]
                p2 -= 1
            else:
                curr += 1

123. Best Time to Buy and Sell Stock III (at most two transactions)
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        buy1, sell1, buy2, sell2 = -sys.maxsize, 0, -sys.maxsize, 0
        for p in prices:
            buy1 = max(buy1, -p)
            sell1 = max(sell1, buy1+p)
            buy2 = max(buy2, sell1-p)
            sell2 = max(sell2, buy2+p)
        return sell2
188. Best Time to Buy and Sell Stock IV (at most k transactions)
    def maxProfit(self, k, prices):
        """
        :type k: int
        :type prices: List[int]
        :rtype: int
        """
        n = len(prices)
        if k <= 0 or not prices:
            return 0
        
        if k >= n // 2:
            profit = 0
            for i in range(1, n):
                if prices[i] > prices[i-1]:
                    profit += prices[i] - prices[i-1]
            return profit
        
        dp = [[0] * n for _ in range(k + 1)]
        for i in range(1, k + 1):
            maxbuy = -prices[0]
            for j in range(1, n):
                dp[i][j] = max(dp[i][j-1], maxbuy + prices[j])
                maxbuy = max(maxbuy, dp[i-1][j-1] - prices[j])
        return dp[k][n-1]
62. Unique Paths (only go right or down) (time: m*n, space: n)
class Solution {
    int uniquePaths(int m, int n) {
        if (m > n) return uniquePaths(n, m);
        vector<int> cur(m, 1);
        for (int j = 1; j < n; j++)
            for (int i = 1; i < m; i++)
                cur[i] += cur[i - 1]; 
        return cur[m - 1];
    }
}; 

127. Word Ladder (time:M*N, space:M*N, where M is length of word, N is word count)
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """

        if endWord not in wordList or not endWord or not beginWord or not wordList:
            return 0

        # Since all words are of same length.
        L = len(beginWord)

        # Dictionary to hold combination of words that can be formed,
        # from any given word. By changing one letter at a time.
        all_combo_dict = defaultdict(list)
        for word in wordList:
            for i in range(L):
                # Key is the generic word
                # Value is a list of words which have the same intermediate generic word.
                all_combo_dict[word[:i] + "*" + word[i+1:]].append(word)


        # Queue for BFS
        queue = [(beginWord, 1)]
        # Visited to make sure we don't repeat processing same word.
        visited = {beginWord: True}
        while queue:
            current_word, level = queue.pop(0)      
            for i in range(L):
                # Intermediate words for current word
                intermediate_word = current_word[:i] + "*" + current_word[i+1:]

                # Next states are all the words which share the same intermediate state.
                for word in all_combo_dict[intermediate_word]:
                    # If at any point if we find what we are looking for
                    # i.e. the end word - we can return with the answer.
                    if word == endWord:
                        return level + 1
                    # Otherwise, add it to the BFS Queue. Also mark it visited
                    if word not in visited:
                        visited[word] = True
                        queue.append((word, level + 1))
                all_combo_dict[intermediate_word] = []
        return 0

126. Word Ladder II
    def findLadders(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: List[List[str]]
        """
        if not beginWord or not endWord or not wordList or endWord not in wordList:
            return []
        
        result = []
        wlen = len(wordList[0])
        nextWords = collections.defaultdict(list)
        for word in wordList:
            for i in range(wlen):
                pattern = word[:i] + '*' + word[i+1:]
                nextWords[pattern].append(word)
        distance = {}
        self.bfs(beginWord, endWord, nextWords, distance)
        print(distance)
        self.dfs(beginWord, endWord, nextWords, distance, [], result)
        return result
                
        
    def bfs(self, beginWord, endWord, nextWords, distance):
        distance[beginWord] = 0
        q = collections.deque()
        q.append(beginWord)
        lastFound = False
        while q:
            size = len(q)
            for _ in range(size):
                top = q.popleft()
                for i in range(len(beginWord)):
                    pattern = top[:i] + '*' + top[i+1:]
                    for word in nextWords[pattern]:
                        if word not in distance:
                            distance[word] = distance[top] + 1
                            q.append(word)
                            if word == endWord:
                                lastFound = True
            if lastFound:
                break
    
    def dfs(self, beginWord, endWord, nextWords, distance, path, result):
        path.append(beginWord)
        if beginWord == endWord:
            result.append(list(path))
        for i in range(len(beginWord)):
            pattern = beginWord[:i] + '*' + beginWord[i+1:]
            for word in nextWords[pattern]:
                if word in distance and distance[word] == distance[beginWord] + 1:
                    self.dfs(word, endWord, nextWords, distance, path, result)
        path.pop()
        
132. Palindrome Partitioning II
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        result = ''
        for i in range(len(s)):
            for j in range(i, -1, -1):
                k = i + i - j
                if k >= len(s) or s[j] != s[k]:
                    break
                if k - j + 1 > len(result):
                    result = s[j:k+1]
                    
            for j in range(i, -1, -1):
                k = i + i - j + 1
                if k >= len(s) or s[j] != s[k]:
                    break
                if k - j + 1 > len(result):
                    result = s[j:k+1]
        return result

207. Course Schedule
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        path = [False] * numCourses
        visited = [False] * numCourses
        graph = [[] for _ in range(numCourses)]
        for i, j in prerequisites:
            graph[i].append(j)
        for i in range(numCourses):
            if not self.dfs(i, graph, path, visited):
                return False
        return True
            
        
    def dfs(self, i, graph, path, visited):
        if path[i]:
            return False
        if visited[i]:
            return True
        path[i], visited[i] = True, True
        for j in graph[i]:
            if not self.dfs(j, graph, path, visited):
                return False
        path[i] = False
        return True

240. Search a 2D Matrix II
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        if not matrix or not matrix[0]:
            return False
        m, n = len(matrix), len(matrix[0])
        i, j = 0, n - 1
        while i < m and j >= 0:
            if matrix[i][j] == target:
                return True
            elif matrix[i][j] > target:
                j -= 1
            else:
                i += 1
        return False
        
264. Ugly Number II (Ugly numbers are positive numbers whose prime factors only include 2, 3, 5)
    def nthUglyNumber(self, n):
        """
        :type n: int
        :rtype: int
        """
        idx0, idx1, idx2 = 0, 0, 0
        result = [1]
        for i in range(1, n):
            minnum = min(result[idx2]*5, min(result[idx0]*2, result[idx1]*3))
            result.append(minnum)
            if minnum == result[idx0]*2:
                idx0 += 1
            if minnum == result[idx1]*3:
                idx1 += 1
            if minnum == result[idx2]*5:
                idx2 += 1
        return result[-1]
        
394. Decode String
    def decodeString(self, s):
        """
        :type s: str
        :rtype: str
        """
        stack = []
        stack.append(['', 1])
        num = ''
        for c in s:
            if c.isdigit():
                num += c
            elif c == '[':
                stack.append(['', int(num)])
                num = ''
            elif c == ']':
                sub, times = stack.pop()
                stack[-1][0] += sub * times
            else:
                stack[-1][0] += c
        return stack[0][0]

726. Number of Atoms
    def countOfAtoms(self, formula):
        N = len(formula)
        stack = [collections.Counter()]
        i = 0
        while i < N:
            if formula[i] == '(':
                stack.append(collections.Counter())
                i += 1
            elif formula[i] == ')':
                top = stack.pop()
                i += 1
                i_start = i
                while i < N and formula[i].isdigit(): i += 1
                multiplicity = int(formula[i_start: i] or 1)
                for name, v in top.items():
                    stack[-1][name] += v * multiplicity
            else:
                i_start = i
                i += 1
                while i < N and formula[i].islower(): i += 1
                name = formula[i_start: i]
                i_start = i
                while i < N and formula[i].isdigit(): i += 1
                multiplicity = int(formula[i_start: i] or 1)
                stack[-1][name] += multiplicity

        return "".join(name + (str(stack[-1][name]) if stack[-1][name] > 1 else '')
                       for name in sorted(stack[-1]))

282. Expression Add Operators
    def addOperators(self, num, target):
        """
        :type num: str
        :type target: int
        :rtype: List[str]
        """
        result = []
        self._addOperators(num, target, 0, 0, 0, '', result)
        return result
        
    def _addOperators(self, num, target, start, value, last, path, result):
        if start == len(num):
            if target == value:
                result.append(path)
            return
        
        x = 0
        for i in range(start, len(num)):
            x = x * 10 + int(num[i])
            if start == 0:
                self._addOperators(num, target, i+1, value+x, x, str(x), result)
            else:
                self._addOperators(num, target, i+1, value+x, x, path+'+'+str(x), result)
                self._addOperators(num, target, i+1, value-x, -x, path+'-'+str(x), result)
                self._addOperators(num, target, i+1, value-last+x*last, x*last, path+'*'+str(x), result)
            if num[start] == '0':
                break

332. Reconstruct Itinerary (Hierholzer, build graph time: nlogn, hierholzer time: n, space: n)
public class Solution {

    Map<String, PriorityQueue<String>> flights;
    LinkedList<String> path;

    public List<String> findItinerary(String[][] tickets) {
        flights = new HashMap<>();
        path = new LinkedList<>();
        for (String[] ticket : tickets) {
            flights.putIfAbsent(ticket[0], new PriorityQueue<>());
            flights.get(ticket[0]).add(ticket[1]);
        }
        dfs("JFK");
        return path;
    }

    public void dfs(String departure) {
        PriorityQueue<String> arrivals = flights.get(departure);
        while (arrivals != null && !arrivals.isEmpty())
            dfs(arrivals.poll());
        path.addFirst(departure);
    }
}


340. Longest Substring with At Most K Distinct Characters (time: n, space: 1)
public int lengthOfLongestSubstringKDistinct(String s, int k) {
    int result = 0;
    int i=0;
    HashMap<Character, Integer> map = new HashMap<Character, Integer>();
 
    for(int j=0; j<s.length(); j++){
        char c = s.charAt(j);
        if(map.containsKey(c)){
            map.put(c, map.get(c)+1);
        }else{
            map.put(c, 1);
        }
 
        if(map.size()<=k){
            result = Math.max(result, j-i+1);
        }else{
            while(map.size()>k){
                char l = s.charAt(i);
                int count = map.get(l);
                if(count==1){
                    map.remove(l);
                }else{
                    map.put(l, map.get(l)-1);
                }
                i++;
            }
        }
    }
    return result;
}
follow up，如果number很大，子串会很长，是个流式输入，不能存在内存，怎么办。
up 1：每次记录字符最后更新的坐标。这样如果新进入字符没有出现过，且加入子串后的总字符类型数大于number，把最后更新坐标中最小的字符去掉。更新长度。这个最小实际用最小堆来做。可以保证到nlogk。
up 2: 面试官问有没有o(1)解法，并且提到了删除插入都是o(1)，模拟过程后回复lru cache。用双向裢表存，而不是用堆存，当新的input 字符进入，如果字符存在于裢表中，将它提出，放到裢表尾部，如果不存在且字符类型数目大于number，将裢表头删除。

418. Sentence Screen Fitting (time:row*avgWordLen, space:sentence lengh)
    public int wordsTyping(String[] sentence, int rows, int cols) {
        StringBuilder str = new StringBuilder();
        for (String s : sentence) {
            s = s + " ";
            str.append(s);
        }
        
        int start = 0;
        for (int i = 0; i < rows; i++) {
            start = start + cols;
            if (str.charAt(start % str.length()) == ' ') {
                start++;
            } else {
                while (start > 0 && str.charAt((start-1) % str.length())  != ' ') {
                    start--;
                }
            }
        }
        return start / str.length();
    }

847. Shortest Path Visiting All Nodes
    def shortestPathLength(self, graph: List[List[int]]) -> int:
        if not graph:
            return 0
        
        visited = set()
        mask = 1
        n = len(graph)
        q = collections.deque()
        for i in range(n):
            q.append((mask, i, 0))
            mask <<= 1
        
        while q:
            mask, i, dist = q.popleft()
            if mask == (1 << n) - 1:
                return dist
            
            for j in graph[i]:
                newMask = mask | (1 << j)
                if (newMask, j) not in visited:
                    visited.add((newMask, j))
                    q.append((newMask, j, dist+1))
        return -1

719. Find K-th Smallest Pair Distance (Binary Search + Two Points (time:NlogN+NlogW); heap (time:(K+N)logN, space:N))
    def smallestDistancePair(self, nums, k):
        def possible(guess):
            #Is there k or more pairs with distance <= guess?
            count = left = 0
            for right, x in enumerate(nums):
                while x - nums[left] > guess:
                    left += 1
                count += right - left
            return count >= k

        nums.sort()
        lo = 0
        hi = nums[-1] - nums[0]
        while lo < hi:
            mi = (lo + hi) / 2
            if possible(mi):
                hi = mi
            else:
                lo = mi + 1

        return lo

877. Stone Game (dp[i][j] means the biggest number of stones you can get MORE than opponent picking piles in piles[i] ~ piles[j])
    def stoneGame(self, p):
        n = len(p)
        dp = p[:]
        for d in range(1, n):
            for i in range(n - d):
                dp[i] = max(p[i] - dp[i + 1], p[i + d] - dp[i])
        return dp[0] > 0
